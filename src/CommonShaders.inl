#pragma once

constexpr const char *vertex_sprite_code = "#version 300 es\n"
                                           "precision highp float;\n"
                                           "layout(location = 0) in vec2 a_position;\n"
                                           "layout(location = 1) in vec2 a_translation;\n"
                                           "layout(location = 2) in vec2 a_scale;\n"
                                           "layout(location = 3) in float a_angle;\n"
                                           "layout(location = 4) in vec2 a_tex_coord;\n"
                                           "layout(location = 5) in vec2 a_tex_dim;\n"
                                           "layout(location = 6) in vec4 a_color;\n"
                                           "out vec2 v_tex_coord;\n"
                                           "out vec4 v_color;\n"
                                           "uniform mat4 u_view_projection ;\n"
                                           "void main()\n"
                                           "{\n"
                                           "    vec2 scaled_pos = a_scale * a_position;\n"
                                           "    vec2 rotated_pos = vec2(cos(a_angle) * scaled_pos.x - sin(a_angle) * scaled_pos.y,\n"
                                           "                                +sin(a_angle) * scaled_pos.x + cos(a_angle) * scaled_pos.y);\n"
                                           "    gl_Position = u_view_projection * vec4(rotated_pos + a_translation, 0., 1.0);\n"
                                           "    float id_f = float(gl_VertexID);\n"
                                           "    float ix = float(gl_VertexID / 2);\n"
                                           "    float iy = mod(id_f, 2.);\n"
                                           "    v_tex_coord = vec2(a_tex_coord.x + a_tex_dim.x * ix, a_tex_coord.y + a_tex_dim.y * iy);\n"
                                           "    v_color = a_color;\n"
                                           "}\n";

constexpr const char *vertex_vertexarray_code = "#version 300 es\n"
                                                "precision highp float;\n"
                                                "in vec2 a_position;\n"
                                                "in vec4 a_color;\n"
                                                "in vec2 a_tex_coord;\n"
                                                "out vec2 v_tex_coord;\n"
                                                "out vec4 v_color;\n"
                                                "uniform mat4 u_view_projection;\n"
                                                "void main()\n"
                                                "{\n"
                                                "    gl_Position = u_view_projection*vec4(a_position.xy, 0.f, 1.0);\n"
                                                "    gl_Position.z = a_color.a;\n"
                                                "    v_color     = a_color;\n"
                                                "    v_tex_coord = a_tex_coord;\n"
                                                "}";

constexpr const char *fragment_font_code = "#version 300 es\n"
                                           "precision highp float;\n"
                                           "in vec2 v_tex_coord;\n"
                                           "in vec4 v_color;\n"
                                           "out vec4 FragColor;\n"
                                           "uniform sampler2D u_texture;\n"
                                           "void main()\n"
                                           "{               "
                                           "    float glyph_region = texture(u_texture, v_tex_coord).r;\n"
                                           "    float x = smoothstep(0., 0.9, glyph_region);\n"
                                           "    FragColor = vec4(vec3(1.-x), glyph_region);\n"
                                           "}";

constexpr const char *fragment_fullpass_code = "#version 300 es\n"
                                               "precision highp float;\n"
                                               "in vec2 v_tex_coord;\n"
                                               "in vec4 v_color;\n"
                                               "out vec4 FragColor;\n"
                                               "void main()\n"
                                               "{\n"
                                               "    FragColor =   v_color;\n"
                                               "}";
constexpr const char *fragment_fullpass_texture_code = "#version 300 es\n"
                                                       "precision highp float;\n"
                                                       "uniform sampler2D u_texture;\n"
                                                       "in vec2 v_tex_coord;\n"
                                                       "in vec4 v_color;\n"
                                                       "out vec4 FragColor;\n"
                                                       "void main()\n"
                                                       "{\n"
                                                       "    vec3 tex_color = texture(u_texture, v_tex_coord).rgb;\n"
                                                       "    float tex_alpha = texture(u_texture, v_tex_coord).a;\n"
                                                       "    FragColor =   v_color *  vec4(tex_color, tex_alpha);\n"
                                                       "}";

constexpr const char *fragment_text_code = "#version 300 es\n"
                                           "precision highp float;\n"
                                           "in vec2 v_tex_coord;\n"
                                           "in vec4 v_color;\n"
                                           "uniform vec3 u_edge_color = vec3(0., 1.,0.);\n"
                                           "uniform float u_thickness = 1.0;\n"
                                           "uniform float u_edge_size = 0.05;\n"
                                           "uniform float u_smoothness = 0.0;\n"
                                           "uniform float u_smoothness_inside = 0.00;\n"
                                           "out vec4 FragColor;\n"
                                           "uniform sampler2D u_texture;\n"
                                           "void main()\n"
                                           "{\n"
                                           "    float thick = mix(0.53, 0.48, u_thickness) ;\n"
                                           "    float glyph = texture(u_texture, v_tex_coord).a;\n"
                                           "    float inside_and_edge = smoothstep(thick, thick*(1.+u_smoothness_inside), glyph);\n"
                                           "    float inside = smoothstep(thick + u_edge_size*(1.+ u_smoothness), thick*(1.+ u_smoothness_inside) + u_edge_size, glyph);\n"
                                           "    float edge =  inside_and_edge - inside;\n"
                                           "    vec3 color_res = mix(v_color.rgb, u_edge_color.rgb, edge);\n"
                                           "    FragColor = vec4(inside_and_edge * color_res, inside_and_edge);\n"
                                           "}";

constexpr const char *fragment_brightness_code = "#version 300 es\n"
                                                 "precision highp float;\n"
                                                 "in vec2 v_tex_coord;\n"
                                                 "in vec4 v_color;\n"
                                                 "out vec4 FragColor;\n"
                                                 "uniform sampler2D u_input;\n"
                                                 "void main()\n"
                                                 "{\n"
                                                 "    vec3 input_color = texture(u_input, v_tex_coord).rgb;\n"
                                                 "    float input_alpha = texture(u_input, v_tex_coord).a;\n"
                                                 "    // check whether fragment output is higher than threshold, if so output as brightness color\n"
                                                 "    float brightness = dot(input_color, vec3(0.2126, 0.7152, 0.0722));\n"
                                                 "    if(brightness >= 1.0)\n"
                                                 "    {\n"
                                                 "        FragColor = vec4(input_color, input_alpha);\n"
                                                 "    }\n"
                                                 "    else{\n"
                                                 "        FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n"
                                                 "    }\n"
                                                 "}\n";

constexpr const char *fragment_gauss_vert_code = "#version 300 es\n"
                                                 "precision highp float;\n"
                                                 "uniform sampler2D u_image;\n"
                                                 "in vec2 v_tex_coord;\n"
                                                 "in vec4 v_color;\n"
                                                 "out vec4 FragColor;\n"
                                                 "void main(void)\n"
                                                 "{\n"
                                                 "	float offset[5] = float[]( 0.0, 1.0, 2.0, 3.0, 4.0 );\n"
                                                 "	float weight[5] = float[]( 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162 );\n"
                                                 "	vec4 vertexColor = v_color;\n"
                                                 "	ivec2 tex_sizei = textureSize(u_image, 0);\n"
                                                 "	vec2 tex_size = vec2(tex_sizei.x, tex_sizei.y);\n"
                                                 "	vec4 result = texture( u_image, vec2(v_tex_coord)) * weight[0];\n"
                                                 "	for (int i=1; i<5; i++)\n"
                                                 "	{\n"
                                                 "		result += texture( u_image, ( v_tex_coord+vec2(0.0, offset[i]/tex_size.y) ) ) * weight[i];\n"
                                                 " 		result += texture( u_image, ( v_tex_coord-vec2(0.0, offset[i]/tex_size.y) ) ) * weight[i];\n"
                                                 "	}\n"
                                                 "	FragColor = result;\n"
                                                 "}\n";

constexpr const char *fragment_gauss_horiz_code = "#version 300 es\n"
                                                  "precision highp float;\n"
                                                  "uniform sampler2D u_image;\n"
                                                  "in vec2 v_tex_coord;\n"
                                                  "in vec4 v_color;\n"
                                                  "out vec4 FragColor;\n"
                                                  "void main(void)\n"
                                                  "{\n"
                                                  "	float offset[5] = float[]( 0.0, 1.0, 2.0, 3.0, 4.0 );\n"
                                                  "	float weight[5] = float[]( 0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162 );\n"
                                                  "	vec4 vertexColor = v_color;\n"
                                                  "	ivec2 tex_sizei = textureSize(u_image, 0);\n"
                                                  "	vec2 tex_size = vec2(tex_sizei.x, tex_sizei.y);\n"
                                                  "	vec4 result = texture( u_image, vec2(v_tex_coord)) * weight[0];\n"
                                                  "	for (int i=1; i<5; i++)\n"
                                                  "	{\n"
                                                  "		result += texture( u_image, ( v_tex_coord+vec2(offset[i]/tex_size.x, 0.0) ) ) * weight[i];\n"
                                                  " 		result += texture( u_image, ( v_tex_coord-vec2(offset[i]/tex_size.x, 0.0) ) ) * weight[i];\n"
                                                  "	}\n"
                                                  "	FragColor =  result;\n"
                                                  "}\n";

constexpr const char *fragment_combine_bloom_code = "#version 300 es\n"
                                                    "precision highp float;\n"
                                                    "uniform sampler2D u_source;\n"
                                                    "uniform sampler2D u_bloom;\n"
                                                    "uniform float exposure = 1.5;\n"
                                                    "in vec2 v_tex_coord;\n"
                                                    "in vec4 v_color;\n"
                                                    "out vec4 FragColor;\n"
                                                    "void main(void)\n"
                                                    "{\n"
                                                    "    const float gamma = 2.2;\n"
                                                    "    vec3 source_color = texture(u_source, v_tex_coord).rgb;\n"
                                                    "    vec3 bloom_color = texture(u_bloom, v_tex_coord).rgb;\n"
                                                    "    float source_alpha = texture(u_source, v_tex_coord).a;\n"
                                                    "    float bloom_alpha = texture(u_bloom, v_tex_coord).a;\n"
                                                    "    vec3 hdr_color = source_color + bloom_color;             // additive blending\n"
                                                    "    vec3 result = vec3(1.0) - exp(-hdr_color * exposure);    // tone mapping\n"
                                                    "    result = pow(result, vec3(1.0 / gamma));                // gamma correction\n"
                                                    "    // result = clamp(bloom_color*5. + source_color, 0., 1.);\n"
                                                    "    float alpha = min(source_alpha + bloom_alpha, 1.);\n"
                                                    "    FragColor = vec4(result, alpha);\n"
                                                    "}\n";

constexpr const char *fragment_edge_detect_code = "#version 300 es\n"
                                                  "precision highp float;\n"
                                                  "in vec2 v_tex_coord;\n"
                                                  "out vec4 FragColor;\n"
                                                  "uniform sampler2D u_input;\n"
                                                  "void main() {\n"
                                                  "    vec2 texel_size = 1.0 / vec2(textureSize(u_input, 0));\n"
                                                  "    float kernelX[9] = float[9](\n"
                                                  "         1.0,  0.0, -1.0,\n"
                                                  "         2.0,  0.0, -2.0,\n"
                                                  "         1.0,  0.0, -1.0\n"
                                                  "    );\n"
                                                  "    float kernelY[9] = float[9](\n"
                                                  "         1.0,  2.0,  1.0,\n"
                                                  "         0.0,  0.0,  0.0,\n"
                                                  "        -1.0, -2.0, -1.0\n"
                                                  "    );\n"
                                                  "    float edgeX = 0.0;\n"
                                                  "    float edgeY = 0.0;\n"
                                                  "    int idx = 0;\n"
                                                  "    for (int y = -1; y <= 1; ++y) {\n"
                                                  "        for (int x = -1; x <= 1; ++x) {\n"
                                                  "            vec2 offset = vec2(float(x), float(y)) * texel_size;\n"
                                                  "            vec3 input_color = texture(u_input, v_tex_coord + offset).rgb;\n"
                                                  "            float input_alpha = texture(u_input, v_tex_coord + offset).a;\n"
                                                  "            float lum = dot(input_color.rgb, vec3(0.299, 0.587, 0.114));\n"
                                                  "            edgeX += kernelX[idx] * input_alpha;\n"
                                                  "            edgeY += kernelY[idx] * input_alpha;\n"
                                                  "            idx++;\n"
                                                  "        }\n"
                                                  "    }\n"
                                                  "    float magnitude = length(vec2(edgeX, edgeY));\n"
                                                  "    FragColor = vec4(vec3(magnitude), min(magnitude, 1.0));\n"
                                                  "}\n";
constexpr const char *fragment_edge_combine_code = "#version 300 es\n"
                                                   "precision highp float;    \n"
                                                   "uniform sampler2D u_source;\n"
                                                   "uniform sampler2D u_edge;\n"
                                                   "uniform vec3 edge_color = vec3(0., 0.5, 5.);\n"
                                                   "in vec2 v_tex_coord;                          \n"
                                                   "in vec4 v_color;       \n"
                                                   "out vec4 FragColor;\n"
                                                   "void main(void)\n"
                                                   "{\n"
                                                   "    vec3 source_color = texture(u_source, v_tex_coord).rgb;      \n"
                                                   "    float source_alpha = texture(u_source, v_tex_coord).a;\n"
                                                   "    float edge_alpha = texture(u_edge, v_tex_coord).a;\n"
                                                   "    FragColor = vec4(edge_color * edge_alpha + source_color*(1.-edge_alpha), source_alpha + edge_alpha);\n"
                                                   "}\n";
